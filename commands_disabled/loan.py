# commands/loan.py
<<<<<<< Updated upstream

from discord.ext import commands
from db import create_loan, approve_loan, record_transaction
from collections import defaultdict
from datetime import datetime, timedelta

borrow_log = defaultdict(list)
ADMIN_ID = "767982567604879371"

def is_borrow_spammer(user_id):
    now = datetime.now(datetime.timezone.utc)
    borrow_log[user_id] = [
        t for t in borrow_log[user_id] if now - t < timedelta(minutes=30)
    ]
    borrow_log[user_id].append(now)
    return len(borrow_log[user_id]) > 3
=======
import discord
from discord.ext import commands
from db import create_loan, approve_loan, record_transaction
>>>>>>> Stashed changes


class LoanCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="‡πÄ‡∏ö‡∏¥‡∏Å")
    async def request_loan(self, ctx, amount: int):
        import random

        user_id = str(ctx.author.id)
        guild_id = str(ctx.guild.id)
<<<<<<< Updated upstream

        if is_borrow_spammer(user_id):
            await ctx.send("‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà‡∏ä‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏°‡∏≤‡∏´‡∏≤‡πÅ‡∏î‡∏Å‡∏´‡∏£‡∏≠‡∏Ñ‡πà‡∏∞ üòò ‡πÄ‡∏ö‡∏¥‡∏Å‡∏ñ‡∏µ‡πà‡∏à‡∏±‡∏á")
            return
        loan_id = create_loan(user_id, guild_id, amount)
        loan_responses = [
            f"‡∏Ç‡∏≠‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô {amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏à‡πä‡∏∞! (loan_id: {loan_id})",
=======
        loan_id = create_loan(user_id, guild_id, amount)
        loan_responses = [
            f"‡∏Ç‡∏≠‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô {amount} SharkCredit ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏•‡∏≤‡∏°‡∏£‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏à‡πä‡∏∞! (loan_id: {loan_id})",
>>>>>>> Stashed changes
            f"‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡πâ‡∏≤! (‡∏ß‡∏á {amount})",
            f"‡∏à‡∏∞‡∏¢‡∏∑‡∏°‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏£‡∏≠? ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏à‡∏∞‡πÅ‡∏ï‡∏Å‡∏ã‡∏±‡∏Å‡∏ó‡∏µ~ (‡∏Ç‡∏≠ {amount})",
            f"‡∏ß‡∏á‡∏´‡∏°‡∏î‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏à‡πä‡∏∞! (‡∏Ç‡∏≠ {amount})",
            f"‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡πÉ‡∏ä‡πà‡∏°‡∏±‡πâ‡∏¢? ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏à‡∏î‡∏µ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡∏π‡πà~ (‡∏Ç‡∏≠ {amount})",
            f"‡∏Ç‡∏≠‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°? ‡∏Ç‡∏≠‡πÉ‡∏à‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏°‡∏±‡πâ‡∏¢‡∏•‡πà‡∏∞! (‡∏Ç‡∏≠ {amount})",
        ]
        await ctx.send(random.choice(loan_responses))
        record_transaction(user_id, guild_id, loan_id, "request_loan", amount, 0)

<<<<<<< Updated upstream
        # ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ DM ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        admin = await self.bot.fetch_user(int(ADMIN_ID))
        if admin:
            await admin.send(
                f"üí∞ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï {amount} (loan_id: {loan_id})\n‡∏à‡∏≤‡∏Å: {ctx.author.display_name} ({user_id})"
            )

=======
>>>>>>> Stashed changes
    @commands.command(name="‡∏´‡∏•‡∏≤‡∏°‡∏£‡∏≠‡∏î")
    @commands.has_permissions(administrator=True)
    async def approve_loan_cmd(self, ctx, loan_id: str):
        admin_id = str(ctx.author.id)
        approve_loan(loan_id, admin_id)
<<<<<<< Updated upstream
        await ctx.send(f"‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤! (loan_id: {loan_id})")
        await ctx.send("‡πÅ‡∏°‡πà‡∏î‡∏µ‡πÉ‡∏à‡πÅ‡∏ó‡∏ö‡πÅ‡∏ï‡∏Å~ ‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ ‚ù§Ô∏è‚Äçüî• (‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏Å‡∏ó‡∏ß‡∏¥‡∏ï‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°) üôè")
        record_transaction(
            admin_id, ctx.guild.id, loan_id, "approve_loan", 0, amount
        )
=======
        await ctx.send(f"‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô SharkCredit ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤! (loan_id: {loan_id})")

    @commands.command(name="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
    async def history(self, ctx):
        await ctx.send("(‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)")

>>>>>>> Stashed changes

async def setup(bot):
    await bot.add_cog(LoanCog(bot))
