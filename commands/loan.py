# commands/loan.py

from discord.ext import commands
from discord import app_commands, Interaction
from config import config
from db import create_loan, approve_loan, record_transaction
from collections import defaultdict
from datetime import datetime, timedelta
import discord
from discord import ui
import random

borrow_log = defaultdict(list)
ADMIN_USER_IDS = config.ADMIN_USER_IDS

def admin_only():
    def predicate(interaction: Interaction) -> bool:
        return interaction.user.id in config.ADMIN_USER_IDS
    return app_commands.check(predicate)

def is_borrow_spammer(user_id):
    now = datetime.now(datetime.timezone.utc)
    borrow_log[user_id] = [
        t for t in borrow_log[user_id] if now - t < timedelta(minutes=30)
    ]
    borrow_log[user_id].append(now)
    return len(borrow_log[user_id]) > 3

class LoanRequestModal(ui.Modal):
    def __init__(self) -> None:
        super().__init__(title="‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï")
        self.add_item(ui.TextInput(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Å‡∏π‡πâ", style=discord.TextInputStyle.short, required=True))

    async def callback(self, interaction: discord.Interaction):
        amount = int(self.children[0].value)
        user_id = str(interaction.user.id)
        guild_id = str(interaction.guild_id)

        if is_borrow_spammer(user_id):
            await interaction.response.send_message("‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà‡∏ä‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏°‡∏≤‡∏´‡∏≤‡πÅ‡∏î‡∏Å‡∏´‡∏£‡∏≠‡∏Ñ‡πà‡∏∞ üòò ‡πÄ‡∏ö‡∏¥‡∏Å‡∏ñ‡∏µ‡πà‡∏à‡∏±‡∏á", ephemeral=True)
            return

        loan_id = create_loan(user_id, guild_id, amount)
        embed = discord.Embed(title="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Å‡∏π‡πâ", description=f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô: {amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", color=0x00ff00)
        embed.add_field(name="‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢", value="10%", inline=False)
        embed.add_field(name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", value=f"{amount * 1.1} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", inline=False)
        view = LoanConfirmView(loan_id, amount)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

        # ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ DM ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        # ‡πÅ‡∏à‡πâ‡∏á DM ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô whitelist
        for admin_id in ADMIN_USER_IDS:
            try:
                admin = await interaction.client.fetch_user(int(admin_id))
                if admin:
                    await admin.send(
                        f"üí∞ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï {amount} (loan_id: {loan_id})\n‡∏à‡∏≤‡∏Å: {interaction.user.display_name} ({user_id})"
                    )
            except Exception as e:
                print(f"[WARN] ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô {admin_id} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

        # Auto reject ‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        await interaction.client.loop.create_task(view.auto_reject(loan_id, interaction.client))

class LoanConfirmView(ui.View):
    def __init__(self, loan_id, amount):
        super().__init__()
        self.loan_id = loan_id
        self.amount = amount

    @ui.button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        # ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ loan_id ‡∏ô‡∏µ‡πâ
        approve_loan(self.loan_id, None)
        record_transaction(
            str(interaction.user.id), str(interaction.guild_id), self.loan_id, "approve_loan", 0, self.amount
        )

    @ui.button(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å loan_id ‡∏ô‡∏µ‡πâ
        create_loan(str(interaction.user.id), str(interaction.guild_id), self.amount, status="cancelled")

    async def auto_reject(self, loan_id, client):
        await discord.utils.sleep(600)  # 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ loan_id ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        if not approve_loan(loan_id, None):
            reject_responses = [
                f"‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï {loan_id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
                f"‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï {loan_id} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
                f"‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï {loan_id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö",
            ]
            await client.get_channel(CHANNEL_ID).send(random.choice(reject_responses))

class LoanRequestView(ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(
            ui.Button(label="‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", emoji="üí∏", custom_id="loan_request")
        )

    async def interaction_check(self, interaction: discord.Interaction):
        if interaction.guild is None:
            await interaction.response.send_message(
                "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô DM ‡πÑ‡∏î‡πâ", ephemeral=True
            )
            return False
        return True

    async def on_interaction(self, interaction: discord.Interaction):
        if interaction.data.custom_id == "loan_request":
            modal = LoanRequestModal()
            await interaction.response.send_modal(modal)


class QuickLoanView(ui.View):
    def __init__(self, amount, admin, bot):
        super().__init__(timeout=300)  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        self.amount = amount
        self.claimed = False
        self.admin = admin
        self.bot = bot

    @ui.button(label="‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô", style=discord.ButtonStyle.green, custom_id="quick_loan_claim")
    async def claim_loan(self, interaction: discord.Interaction, button: ui.Button):
        if self.claimed:
            await interaction.response.send_message("‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
            return
        self.claimed = True
        button.disabled = True
        user_id = str(interaction.user.id)
        guild_id = str(interaction.guild_id)
        loan_id = create_loan(user_id, guild_id, self.amount)
        # ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏î
        await interaction.response.send_message(
            f"üéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏π‡πâ {self.amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (loan_id: {loan_id}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            ephemeral=True
        )
        # ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        if self.admin:
            await self.admin.send(
                f"‚úÖ {interaction.user.display_name} ({user_id}) ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏π‡πâ {self.amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (loan_id: {loan_id})"
            )
        # ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏´‡∏•‡∏±‡∏Å
        channel = interaction.channel
        if channel:
            await channel.send(
                f"üéâ {interaction.user.mention} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏π‡πâ {self.amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (loan_id: {loan_id})"
            )
        self.stop()

    async def on_timeout(self):
        for item in self.children:
            if isinstance(item, ui.Button):
                item.disabled = True
        # ‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (optional)

class LoanCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="‡πÄ‡∏ö‡∏¥‡∏Å", description="‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô SharkCredit")
    async def request_loan_slash(self, interaction: Interaction, amount: int):
        user_id = str(interaction.user.id)
        guild_id = str(interaction.guild_id)
        if is_borrow_spammer(user_id):
            await interaction.response.send_message("‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà‡∏ä‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏°‡∏≤‡∏´‡∏≤‡πÅ‡∏î‡∏Å‡∏´‡∏£‡∏≠‡∏Ñ‡πà‡∏∞ üòò ‡πÄ‡∏ö‡∏¥‡∏Å‡∏ñ‡∏µ‡πà‡∏à‡∏±‡∏á", ephemeral=True)
            return
        loan_id = create_loan(user_id, guild_id, amount)
        loan_responses = [
            f"‡∏Ç‡∏≠‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô {amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏à‡πä‡∏∞! (loan_id: {loan_id})",
            f"‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡πâ‡∏≤! (‡∏ß‡∏á {amount})",
            f"‡∏à‡∏∞‡∏¢‡∏∑‡∏°‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏£‡∏≠? ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏à‡∏∞‡πÅ‡∏ï‡∏Å‡∏ã‡∏±‡∏Å‡∏ó‡∏µ~ (‡∏Ç‡∏≠ {amount})",
            f"‡∏ß‡∏á‡∏´‡∏°‡∏î‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏à‡πä‡∏∞! (‡∏Ç‡∏≠ {amount})",
            f"‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡πÉ‡∏ä‡πà‡∏°‡∏±‡πâ‡∏¢? ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏à‡∏î‡∏µ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡∏π‡πà~ (‡∏Ç‡∏≠ {amount})",
            f"‡∏Ç‡∏≠‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°? ‡∏Ç‡∏≠‡πÉ‡∏à‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏°‡∏±‡πâ‡∏¢‡∏•‡πà‡∏∞! (‡∏Ç‡∏≠ {amount})",
        ]
        await interaction.response.send_message(random.choice(loan_responses), ephemeral=True)
        record_transaction(user_id, guild_id, loan_id, "request_loan", amount, 0)
        # ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ DM ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        for admin_id in config.ADMIN_USER_IDS:
            admin = await self.bot.fetch_user(admin_id)
            if admin:
                await admin.send(
                    f"üí∞ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï {amount} (loan_id: {loan_id})\n‡∏à‡∏≤‡∏Å: {interaction.user.display_name} ({user_id})"
                )

    @app_commands.command(name="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", description="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ SharkCredit")
    async def loan_history_slash(self, interaction: Interaction):
        user_id = str(interaction.user.id)
        guild_id = str(interaction.guild_id)
        from db import get_loan_history
        history = get_loan_history(user_id, guild_id)
        if not history:
            await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", ephemeral=True)
        else:
            msg = "\n".join([
                f"loan_id: {h.get('id', '-')}, amount: {h.get('amount', '-')} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï, status: {h.get('status', '-')}"
                for h in history
            ])
            await interaction.response.send_message(f"‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n{msg}", ephemeral=True)

    @app_commands.command(name="‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ", description="‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡∏î‡πà‡∏ß‡∏ô (admin only)")
    @admin_only()
    async def quick_loan_slash(self, interaction: Interaction, amount: int):
        admin = interaction.user
        view = QuickLoanView(amount, admin, self.bot)
        embed = discord.Embed(
            title="‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡∏î‡πà‡∏ß‡∏ô!",
            description=f"‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ {amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!",
            color=0x00ffcc
        )
        await interaction.response.send_message(embed=embed, view=view)

    @app_commands.command(name="approve_loan", description="‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô (admin only)")
    @admin_only()
    async def approve_loan_slash(self, interaction: Interaction, loan_id: str):
        admin_id = str(interaction.user.id)
        approve_loan(loan_id, admin_id)
        await interaction.response.send_message(f"‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤! (loan_id: {loan_id})", ephemeral=True)
        record_transaction(
            admin_id, interaction.guild_id, loan_id, "approve_loan", 0, 0
        )

    @app_commands.command(name="close_loan", description="‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ (admin only)")
    @admin_only()
    async def close_loan_slash(self, interaction: Interaction, loan_id: str, user: discord.Member, amount: int):
        admin_id = str(interaction.user.id)
        user_id = str(user.id)
        guild_id = str(interaction.guild_id)
        try:
            from db import sb_update_loan
            sb_update_loan(loan_id, status='paid', admin_id=admin_id)
        except ImportError:
            pass
        record_transaction(user_id, guild_id, loan_id, "pay", amount, int(amount * 0.1), admin_id=admin_id)
        await interaction.response.send_message(f"‚úÖ ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á {user.mention} (loan_id: {loan_id}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)


    @app_commands.command(name="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", description="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ SharkCredit")
    async def loan_history_slash(self, interaction: Interaction):
        user_id = str(interaction.user.id)
        guild_id = str(interaction.guild_id)
        from db import get_loan_history
        history = get_loan_history(user_id, guild_id)
        if not history:
            await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", ephemeral=True)
        else:
            msg = "\n".join([
                f"loan_id: {h.get('id', '-')}, amount: {h.get('amount', '-')} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï, status: {h.get('status', '-')}"
                for h in history
            ])
            await interaction.response.send_message(f"‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n{msg}", ephemeral=True)

    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ")
    @commands.has_permissions(administrator=True)
    async def quick_loan(self, ctx, amount: int):
        admin = ctx.author
        view = QuickLoanView(amount, admin, self.bot)
        embed = discord.Embed(
            title="‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡∏î‡πà‡∏ß‡∏ô!",
            description=f"‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ {amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!",
            color=0x00ffcc
        )
        await ctx.send(embed=embed, view=view)

    @app_commands.command(name="close_loan", description="‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ (admin only)")
    @admin_only()
    async def close_loan_slash(self, interaction: Interaction, loan_id: str, user: discord.Member, amount: int):
        admin_id = str(interaction.user.id)
        user_id = str(user.id)
        guild_id = str(interaction.guild_id)
        try:
            from db import sb_update_loan
            sb_update_loan(loan_id, status='paid', admin_id=admin_id)
        except ImportError:
            pass
        record_transaction(user_id, guild_id, loan_id, "pay", amount, int(amount * 0.1), admin_id=admin_id)
        await interaction.response.send_message(f"‚úÖ ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á {user.mention} (loan_id: {loan_id}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)


    @app_commands.command(name="loan", description="‡∏Ç‡∏≠‡∏Å‡∏π‡πâ SharkCredit (‡∏ï‡πâ‡∏≠‡∏á admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)")
    async def request_loan_slash(self, interaction: Interaction, amount: int):
        user_id = str(interaction.user.id)
        guild_id = str(interaction.guild_id)

        if is_borrow_spammer(user_id):
            await interaction.response.send_message("‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà‡∏ä‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏°‡∏≤‡∏´‡∏≤‡πÅ‡∏î‡∏Å‡∏´‡∏£‡∏≠‡∏Ñ‡πà‡∏∞ üòò ‡πÄ‡∏ö‡∏¥‡∏Å‡∏ñ‡∏µ‡πà‡∏à‡∏±‡∏á", ephemeral=True)
            return
        loan_id = create_loan(user_id, guild_id, amount)
        record_transaction(user_id, guild_id, loan_id, "request_loan", amount, 0)
        embed = discord.Embed(title="‡∏Ç‡∏≠‡∏Å‡∏π‡πâ SharkCredit", description=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", color=0x00ff00)
        await interaction.response.send_message(embed=embed, ephemeral=True)
        # ‡πÅ‡∏à‡πâ‡∏á DM ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô whitelist
        for admin_id in ADMIN_USER_IDS:
            try:
                admin = await interaction.client.fetch_user(int(admin_id))
                if admin:
                    await admin.send(
                        f"üí∞ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï {amount} (loan_id: {loan_id})\n‡∏à‡∏≤‡∏Å: {interaction.user.display_name} ({user_id})"
                    )
            except Exception as e:
                print(f"[WARN] ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô {admin_id} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    @app_commands.command(name="approve_loan", description="‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô (admin only)")
    @admin_only()
    async def approve_loan_slash(self, interaction: Interaction, loan_id: str):
        admin_id = str(interaction.user.id)
        approve_loan(loan_id, admin_id)
        await interaction.response.send_message(f"‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô SharkCredit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (loan_id: {loan_id})", ephemeral=True)
        record_transaction(
            admin_id, interaction.guild_id, loan_id, "approve_loan", 0, 0
        )

    @commands.command(name="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
    async def notify(self, ctx):
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏∏‡∏Å 2 ‡∏ä‡∏°.
        await ctx.send("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞...")
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

async def setup(bot):
    await bot.add_cog(LoanCog(bot))
